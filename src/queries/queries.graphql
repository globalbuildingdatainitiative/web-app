mutation acceptInvitation($user: AcceptInvitationInput!) {
  acceptInvitation(user: $user)
}

mutation rejectInvitation($userId: String!) {
  rejectInvitation(userId: $userId)
}

mutation inviteUsers($input: InviteUsersInput!) {
  inviteUsers(input: $input) {
    email
    status
    message
  }
}

mutation resendInvitation($userId: String!) {
  resendInvitation(userId: $userId) {
    email
    status
    message
  }
}

query getContributionsPerMonth {
  contributions {
    items(sortBy: { dsc: "uploaded_at" }, limit: null) {
      id
      uploadedAt
    }
    count
  }
}

query getContributionsForHeader {
  contributions {
    items(sortBy: { dsc: "uploaded_at" }, limit: null) {
      uploadedAt
      user {
        id
      }
    }
    count
  }
}

query getContributions($limit: Int, $offset: Int = 0, $sortBy: SortBy, $filterBy: FilterBy) {
  contributions {
    items(limit: $limit, offset: $offset, sortBy: $sortBy, filterBy: $filterBy) {
      id
      uploadedAt
      public
      user {
        id
        firstName
        lastName
        organization {
          id
          name
        }
      }
      project {
        name
        location {
          countryName
        }
        lifeCycleStages
        impactCategories
        projectInfo {
          buildingType
        }
      }
    }
    count(filterBy: $filterBy)
  }
}

query getContributionsForDetails($limit: Int, $filterBy: FilterBy) {
  contributions {
    items(limit: $limit, filterBy: $filterBy) {
      id
      project {
        name
      }
    }
  }
}

mutation addContribution($contributions: [InputContribution!]!) {
  addContributions(contributions: $contributions) {
    id
  }
}

query getOrganizations($limit: Int, $offset: Int = 0, $sortBy: SortBy, $filterBy: FilterBy) {
  organizations {
    items(limit: $limit, offset: $offset, sortBy: $sortBy, filterBy: $filterBy) {
      id
      name
      city
      address
      country
      metaData {
        stakeholders
      }
    }
    count(filterBy: $filterBy)
  }
}

mutation createOrganizations($organizations: [InputOrganization!]!) {
  createOrganizations(organizations: $organizations) {
    id
    name
    address
    city
    country
    metaData {
      stakeholders
    }
  }
}

mutation updateOrganizations($organizations: [InputOrganization!]!) {
  updateOrganizations(organizations: $organizations) {
    id
    name
    address
    city
    country
    metaData {
      stakeholders
    }
  }
}

query getUsers($limit: Int, $offset: Int = 0, $sortBy: SortBy, $filterBy: FilterBy) {
  users {
    items(limit: $limit, offset: $offset, sortBy: $sortBy, filterBy: $filterBy) {
      id
      firstName
      lastName
      email
      timeJoined
      invited
      inviteStatus
      inviterName
      roles
      organization {
        id
        name
      }
    }
    count
  }
}

query getCurrentUser($id: String!) {
  users {
    items(filterBy: { equal: { id: $id } }, limit: 1) {
      id
      firstName
      lastName
      email
      roles
      organization {
        id
        name
        address
        city
        country
        metaData {
          stakeholders
        }
      }
      timeJoined
    }
  }
}

mutation updateUser($userInput: UpdateUserInput!) {
  updateUser(userInput: $userInput) {
    id
    firstName
    lastName
    email
    timeJoined
    roles
    organizationId
  }
}

query getProjectsCountsByCountry {
  projects {
    groups(groupBy: "location.country") {
      group
      count
      items(limit: 1) {
        id
        location {
          countryName
          longitude
          latitude
        }
      }
    }
  }
}

query getProjectDataForBoxPlot($aggregation: JSON!) {
  projects {
    groups(groupBy: "location.country") {
      group
      items(limit: null) {
        id
        location {
          countryName
        }
        softwareInfo {
          lcaSoftware
        }
        metaData {
          source {
            name
          }
        }
      }
    }
    aggregation(apply: $aggregation)
  }
}

query getProjectPortfolio($limit: Int, $offset: Int, $filters: FilterBy, $sortBy: SortBy) {
  projects {
    items(limit: $limit, offset: $offset, filterBy: $filters, sortBy: $sortBy) {
      id
      name
      location {
        countryName
      }
      softwareInfo {
        lcaSoftware
      }
      projectInfo {
        grossFloorArea {
          value
        }
        buildingType
        buildingTypology
        buildingCompletionYear
        buildingFootprint {
          value
        }
        buildingHeight {
          value
        }
        buildingMass {
          value
        }
        buildingPermitYear
        buildingUsers
        floorsAboveGround
        floorsBelowGround
        frameType
        generalEnergyClass
        roofType
        heatedFloorArea {
          value
        }
      }
      metaData {
        source {
          name
          url
        }
      }
      results {
        gwp {
          a0
          a1a3
          a4
          a5
          b1
          b2
          b3
          b4
          b5
          b6
          b7
          b8
          c1
          c2
          c3
          c4
          d
          total
        }
      }
    }
    count(filterBy: $filters)
  }
}

query getProjectDetails($id: UUID!) {
  contributions {
    items(filterBy: { equal: { id: $id } }) {
      project {
        id
        name
        location {
          countryName
        }
        lifeCycleStages
        projectInfo {
          buildingCompletionYear
          buildingFootprint {
            value
            unit
          }
          buildingHeight {
            value
            unit
          }
          buildingMass {
            value
            unit
          }
          buildingModelScope
          buildingPermitYear
          buildingType
          buildingTypology
          buildingUsers
          certifications
          energyDemandElectricity
          energyDemandHeating
          energySupplyElectricity
          energySupplyHeating
          exportedElectricity
          floorsAboveGround
          floorsBelowGround
          frameType
          generalEnergyClass
          grossFloorArea {
            value
            unit
          }
          heatedFloorArea {
            value
            unit
          }
          localEnergyClass
          roofType
        }
        metaData {
          source {
            name
            url
          }
          productClassificationSystem
          climateZone
          image
          owner {
            contact
            web
            country
            email
            type
            representative
          }
          assessment {
            assessmentMethodologyDescription
            uncertainty
            cutoffMethod
            assessor {
              name
              email
              organization
            }
            year
            date
            quantitySource
            quantitySourceDetail
            purpose
            iso21931Compliance
            en15978Compliance
            rics2017Compliance
            rics2023Compliance
            ashrae240pCompliance
            seiPrestandardCompliance
            verified
            verifiedInfo
            validityPeriod
            resultsValidationDescription
            toolReportUpload
            reportName
            additionalLcaReportName
            projectPhaseAtReporting
            projectPhaseAtTimeOfAssessment
            operationalEnergyIncluded
            biogenicCarbonIncluded
            biogenicCarbonAccountingMethod
            bioSustainabilityCertification
            biogenicCarbonDescription
            projectRefrigerants
            refrigerantTypeIncluded
            substructureScope
            shellSuperstructureScope
            shellExteriorEnclosureScope
            interiorConstructionScope
            interiorFinishesScope
            servicesMechanicalScope
            servicesElectricalScope
            servicesPlumbingScope
            siteworkScope
            equipmentScope
            furnishingsScope
            lcaRequirements
          }
          lcaSoftwareVersion
          lcaDatabase
          lcaDatabaseVersion
          lcaDatabaseOther
          lcaModelType
          interstitialFloors
          newlyBuiltArea {
            value
            unit
          }
          retrofittedArea {
            value
            unit
          }
          demolishedArea {
            value
            unit
          }
          existingArea {
            value
            unit
          }
          builtFloorArea {
            value
            unit
          }
          buildingProjectConstructionType2
          infrastructureProjectConstructionType
          infrastructureSectorType
          buildingUseType
          infrastructureUseType
          projectWorkArea {
            value
            unit
          }
          projectSiteArea {
            value
            unit
          }
          conditionedFloorArea {
            value
            unit
          }
          unconditionedFloorArea {
            value
            unit
          }
          enclosedParkingArea {
            value
            unit
          }
          detachedParkingArea {
            value
            unit
          }
          surfaceParkingArea {
            value
            unit
          }
          detachedParkingStructureArea {
            value
            unit
          }
          ibcConstructionType
          projectSurroundings
          projectHistoric
          fullTimeEquivalent
          occupantLoad
          meanRoofHeight {
            value
            unit
          }
          windowWallRatio
          thermalEnvelopeArea {
            value
            unit
          }
          residentialUnits
          bedroomCount
          projectExpectedLife
          resultsValidatedAsBuilt
          resultsValidatedAsBuiltDescription
          assessmentCutoffType
          assessmentCutoff
          assessmentCostCutoff
          heritageStatus
          omniclassConstructionEntity
          energy {
            toolEnergyModeling
            toolEnergyModelingVersion
            energyModelMethodologyReference
            gwpEnergySourcesYear
            siteLocationWeatherData
            electricityProvider
            electricitySource
            electricityCarbonFactor
            electricityCarbonFactorSource
          }
          architectOfRecord
          projectUserStudio
          generalContractor
          mepEngineer
          sustainabilityConsultant
          structuralEngineer
          civilEngineer
          landscapeConsultant
          interiorDesigner
          otherProjectTeam
          workCompletionYear
          constructionStart
          constructionYearExistingBuilding
          buildingOccupancyStart
          cost {
            currency
            totalCost
            hardCost
            softCost
            siteworksCost
            costSource
            notes
          }
          structural {
            columnGridLong {
              value
              unit
            }
            riskCategory
            liveLoad {
              value
              unit
            }
            snowLoad {
              value
              unit
            }
            windSpeed {
              value
              unit
            }
            earthquakeImportanceFactor
            seismicDesignCategory
            horizontalGravitySystem
            secondaryHorizontalGravitySystem
            verticalGravitySystem
            secondaryVerticalGravitySystem
            lateralSystem
            podium
            allowableSoilBearingPressure {
              value
              unit
            }
            foundationType
          }
          publication {
            authors
            year
            doi
            title
            publisher
          }
        }
        results {
          gwp {
            a0
            a1a3
            a4
            a5
            b1
            b2
            b3
            b4
            b5
            b6
            b7
            b8
            c1
            c2
            c3
            c4
            d
          }
        }
      }
    }
  }
}

query getAggregatedProjectData($aggregation: JSON!) {
  projects {
    aggregation(apply: $aggregation)
  }
}

mutation deleteContributions($contributions: [UUID!]!) {
  deleteContributions(contributions: $contributions)
}

mutation updateContributions($contributions: [UpdateContribution!]!) {
  updateContributions(contributions: $contributions) {
    id
  }
}

mutation impersonateUser($userId: String!) {
  impersonate(userId: $userId)
}

mutation makeUserAdmin($userId: String!) {
  makeAdmin(userId: $userId)
}

query getRolesAndPermissions {
  roles {
    name
    permissions
  }
}
